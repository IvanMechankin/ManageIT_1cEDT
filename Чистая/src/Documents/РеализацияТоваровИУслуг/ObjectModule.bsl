Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)  
	СтандартнаяОбработка = Ложь;
	Ответственный = ПараметрыСеанса.ТекущийСотрудник;
КонецПроцедуры  


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Вставить содержимое обработчика.
	
	Движения.Управленческий.Очистить();
	
	Движения.Товары.Очистить();
    Движения.Товары.Записывать = Истина;
    Движения.Записать();
	
	
	Движения.ВзаиморасчетыСКонтрагентами.Записывать = Истина;
	Движения.Расходы.Записывать = Истина; 
	Движения.Доходы.Записывать = Истина;
	
	
	Запрос = Новый Запрос; 
	
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровИУслугТоварыИУслуги.Номенклатура КАК Номенклатура,
	               |	СУММА(РеализацияТоваровИУслугТоварыИУслуги.Количество) КАК Количество,
	               |	РеализацияТоваровИУслугТоварыИУслуги.Номенклатура.Тип КАК НоменклатураТип,
	               |	СУММА(РеализацияТоваровИУслугТоварыИУслуги.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	Документ.РеализацияТоваровИУслуг.ТоварыИУслуги КАК РеализацияТоваровИУслугТоварыИУслуги
	               |ГДЕ
	               |	РеализацияТоваровИУслугТоварыИУслуги.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровИУслугТоварыИУслуги.Номенклатура,
	               |	РеализацияТоваровИУслугТоварыИУслуги.Номенклатура.Тип
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.Количество КАК Количество,
	               |	Товары.Сумма КАК Сумма,
	               |	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	               |	ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	               |	Товары.НоменклатураТип КАК Тип
	               |ИЗ
	               |	Товары КАК Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Товары.Остатки(
	               |				&МоментВремени,
	               |				Номенклатура В
	               |					(ВЫБРАТЬ
	               |						Товары.Номенклатура КАК Номенклатура
	               |					ИЗ
	               |						Товары КАК Товары)) КАК ТоварыОстатки
	               |		ПО Товары.Номенклатура = ТоварыОстатки.Номенклатура";
	
	
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	
	
	Выборка = Запрос.Выполнить().Выбрать();	

	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Тип = Перечисления.ТипыНоменклатуры.Товар Тогда
			
			Если Выборка.Количество > Выборка.КоличествоОстаток Тогда
				Сообщить(СтрШаблон("Не хватает товара %1", Выборка.Номенклатура));
				Отказ = Истина;
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Количество = Выборка.КоличествоОстаток Тогда
				
				Себестоимость = Выборка.СуммаОстаток;
			Иначе
				
				Себестоимость = Выборка.СуммаОстаток / Выборка.КоличествоОстаток * Выборка.Количество;
				
			КонецЕсли;
			
			
			ДвижениеТовары = Движения.Товары.Добавить();
			ДвижениеТовары.ВидДвижения = ВидДвиженияНакопления.Расход;
			ДвижениеТовары.Период = Дата;
			ДвижениеТовары.Ответственный = Ответственный;
			ДвижениеТовары.Номенклатура = Выборка.Номенклатура;
			ДвижениеТовары.Количество = Выборка.Количество;
			ДвижениеТовары.Сумма = Себестоимость;
			
			ДвижениеРасходы = Движения.Расходы.Добавить();
			ДвижениеРасходы.Период = Дата;
			ДвижениеРасходы.Номенклатура = Выборка.Номенклатура;
			ДвижениеРасходы.Ответственный = Ответственный;
			ДвижениеРасходы.Сумма = Себестоимость;
			
			ПроводкаДвиженияУправленческий = Движения.Управленческий.Добавить();
			ПроводкаДвиженияУправленческий.Период = Дата;
			ПроводкаДвиженияУправленческий.Активность = Истина;
			
			ПроводкаДвиженияУправленческий.СчетДт = ПланыСчетов.Управленческий.Расходы;
			ПроводкаДвиженияУправленческий.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Выборка.Номенклатура;
			
			ПроводкаДвиженияУправленческий.СчетКт = ПланыСчетов.Управленческий.Товары;
			ПроводкаДвиженияУправленческий.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Выборка.Номенклатура;
			
			ПроводкаДвиженияУправленческий.Сумма = Себестоимость;
			Движения.Управленческий.Записать();
			
			
		КонецЕсли;
			
	КонецЦикла; 
	
	ДвижениеДоходы = Движения.Доходы.Добавить();
	ДвижениеДоходы.Ответственный = Ответственный;
	ДвижениеДоходы.Период = Дата;
	ДвижениеДоходы.Номенклатура = Выборка.Номенклатура;
	ДвижениеДоходы.Количество = Выборка.Количество;
	ДвижениеДоходы.Сумма = Выборка.Сумма;
	
	ДвиженияУправленческий = Движения.Управленческий.Добавить();
	ДвиженияУправленческий.Период = Дата;
	ДвиженияУправленческий.Активность = Истина;
	
	ДвиженияУправленческий.СчетДт = ПланыСчетов.Управленческий.РасчетыСПокупателями; 
	ДвиженияУправленческий.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = Покупатель;
	
	ДвиженияУправленческий.СчетКт = ПланыСчетов.Управленческий.Выручка;
	ДвиженияУправленческий.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = Покупатель; 
	
	ДвиженияУправленческий.Сумма = Сумма;
	Движения.Управленческий.Записать();
	
	
	
	
	
	
	
	ДвижениеВзаиморасчёты = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
	ДвижениеВзаиморасчёты.ВидДвижения = ВидДвиженияНакопления.Приход; 
	ДвижениеВзаиморасчёты.Период = Дата;
	ДвижениеВзаиморасчёты.Контрагент = Покупатель;
	ДвижениеВзаиморасчёты.Ответственный = Ответственный;
	ДвижениеВзаиморасчёты.Сумма = Сумма; 
	
	Движения.Товары.Записывать = Истина;
	
	
КонецПроцедуры

